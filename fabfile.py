import os
import glob

from fabric.api import *
from fabric import colors
from fabric.operations import put
from fabric.sftp import SFTP as _SFTP


"""
Base configuration
"""
env.project_name = 'inndev'
env.file_path = '.'
env.ignore_files_containing = [
    '.py',
    '.pyc',
    '.git',
    'requirements.txt',
]


# Environments
def production():
    """
    Work on production environment
    """
    env.settings = 'production'
    env.hosts = [os.environ['INNDEV_PRODUCTION_SFTP_HOST'], ]
    env.user = os.environ['INNDEV_PRODUCTION_SFTP_USER']
    env.password = os.environ['INNDEV_PRODUCTION_SFTP_PASSWORD']


def staging():
    """
    Work on staging environment
    """
    env.settings = 'staging'
    env.hosts = [os.environ['INNDEV_STAGING_SFTP_HOST'], ]
    env.user = os.environ['INNDEV_STAGING_SFTP_USER']
    env.password = os.environ['INNDEV_STAGING_SFTP_PASSWORD']

def stable():
    """
    Work on stable branch.
    """
    print(colors.green('On stable'))
    env.branch = 'stable'


def master():
    """
    Work on development branch.
    """
    print(colors.yellow('On master'))
    env.branch = 'master'


def branch(branch_name):
    """
    Work on any specified branch.
    """
    print(colors.red('On %s' % branch_name))
    env.branch = branch_name


def theme(name):
    """
    Specify a theme directory to deploy
    """
    env.file_path = 'wp-content/themes/%s/' % name


def deploy():
    """
    Deploy local copy of repository to target environment
    """
    require('settings', provided_by=["production", "staging", ])
    require('branch', provided_by=[master, stable, branch, ])

    local('git checkout %s' % env.branch)
    local('git submodule update --init --recursive')

    # Never include files that haven't been added to the repo
    _ignore_untracked()
    # Ignore any files that .gitignore file catches
    _use_gitignore()

    ftp = _SFTP(env.host_string)

    with settings(warn_only=True):
        for f in _find_file_paths(env.file_path):
            result = _put_file(f)
            if result.failed:
                failed = result.failed[0]
                new_dir = os.path.dirname(failed)

                # Create parent dir for file that failed
                print(colors.yellow("Failed to transfer: %s" % failed))
                print(colors.green("Creating new directory: %s" % new_dir))
                ftp.mkdir(new_dir, False)

                # Retry the transfer
                print(colors.green("Retrying transfer: %s" % failed))
                _put_file(f)


def _put_file(file_path_tuple):
    """
    Wrapper for fabric's `put` function that accepts a tuple as generated by `_find_file_paths`
    """
    if env.file_path == '.':
        result = put(local_path=file_path_tuple[0], remote_path='/%s' % file_path_tuple[0])
    else:
        result = put(local_path=file_path_tuple[1], remote_path='/%s' % file_path_tuple[1])
    return result


def _find_file_paths(directory):
    """
    A generator function that recursively finds all files in the
    upload directory.
    """
    for root, dirs, files in os.walk(directory):
        rel_path = os.path.relpath(root, directory)
        for f in files:
            # Skip dot files
            if f.startswith('.'):
                continue

            if rel_path == '.':
                one, two = f, os.path.join(root, f)
            else:
                one, two = os.path.join(rel_path, f), os.path.join(root, f)

            # Skip any files we explicitly say to ignore
            skip = False
            for s in env.ignore_files_containing:
                if s in one or s in two:
                    skip = True
                    break

            if skip:
                continue

            yield(one, two)


def _ignore_untracked():
    """
    Grabs list of files that haven't been added to the git repo and
    adds them to `env.ignore_files_containing`.
    """
    result = local('git ls-files --others --exclude-standard', capture=True)
    if result:
        for line in result.splitlines():
            env.ignore_files_containing.append(line)


def _use_gitignore():
    """
    Uses glob to find files that shouldn't be deployed based on your .gitignore file
    """
    try:
        ignore_file = open('.gitignore')
        tests = [
            line for line in ignore_file.read().splitlines()
            if not line.startswith('#') and line is not '']
        ignore_file.close()

        for test in tests:
            env.ignore_files_containing = env.ignore_files_containing + glob.glob(test)
    except IOError:
        return False
